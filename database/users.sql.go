// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    username,
    email,
    hashed_password,
    fullname,
    status,
    bio
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, username, email, hashed_password, fullname, bio, status, created_at, updated_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
	Fullname       string `json:"fullname"`
	Status         string `json:"status"`
	Bio            string `json:"bio"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
		arg.Fullname,
		arg.Status,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Fullname,
		&i.Bio,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const deleteUser = `-- name: DeleteUser :exec

DELETE FROM users
WHERE id = $1
`

// DELETE QUERIES
func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, hashed_password, fullname, bio, status, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Fullname,
		&i.Bio,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one

SELECT id, username, email, hashed_password, fullname, bio, status, created_at, updated_at FROM users
WHERE id = $1
`

// GET QUERIES
func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Fullname,
		&i.Bio,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, username, email, hashed_password, fullname, bio, status, created_at, updated_at FROM users
WHERE username = $1
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Fullname,
		&i.Bio,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, hashed_password, fullname, bio, status, created_at, updated_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.HashedPassword,
			&i.Fullname,
			&i.Bio,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserBio = `-- name: UpdateUserBio :one
UPDATE users
SET bio = $2
WHERE id = $1
RETURNING id, username, email, hashed_password, fullname, bio, status, created_at, updated_at
`

type UpdateUserBioParams struct {
	ID  int32  `json:"id"`
	Bio string `json:"bio"`
}

func (q *Queries) UpdateUserBio(ctx context.Context, arg UpdateUserBioParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserBio, arg.ID, arg.Bio)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Fullname,
		&i.Bio,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserFullname = `-- name: UpdateUserFullname :one
UPDATE users
SET fullname = $2
WHERE id = $1
RETURNING id, username, email, hashed_password, fullname, bio, status, created_at, updated_at
`

type UpdateUserFullnameParams struct {
	ID       int32  `json:"id"`
	Fullname string `json:"fullname"`
}

func (q *Queries) UpdateUserFullname(ctx context.Context, arg UpdateUserFullnameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserFullname, arg.ID, arg.Fullname)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Fullname,
		&i.Bio,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one

UPDATE users
SET hashed_password = $2
WHERE id = $1
RETURNING id, username, email, hashed_password, fullname, bio, status, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	ID             int32  `json:"id"`
	HashedPassword string `json:"hashed_password"`
}

// UPDATE QUERIES
func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.ID, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Fullname,
		&i.Bio,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserStatus = `-- name: UpdateUserStatus :one
UPDATE users
SET status = $2
WHERE id = $1
RETURNING id, username, email, hashed_password, fullname, bio, status, created_at, updated_at
`

type UpdateUserStatusParams struct {
	ID     int32  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserStatus, arg.ID, arg.Status)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Fullname,
		&i.Bio,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserUpdatedAt = `-- name: UpdateUserUpdatedAt :exec
UPDATE users
SET updated_at = now()
WHERE id = $1
`

func (q *Queries) UpdateUserUpdatedAt(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, updateUserUpdatedAt, id)
	return err
}
