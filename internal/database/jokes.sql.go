// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: jokes.sql

package database

import (
	"context"
)

const createJoke = `-- name: CreateJoke :one
INSERT INTO jokes (
    author,
    title,
    text,
    explanation
) VALUES (
    $1, $2, $3, $4
) RETURNING id, author, title, text, explanation, created_at, updated_at
`

type CreateJokeParams struct {
	Author      string `json:"author"`
	Title       string `json:"title"`
	Text        string `json:"text"`
	Explanation string `json:"explanation"`
}

func (q *Queries) CreateJoke(ctx context.Context, arg CreateJokeParams) (Joke, error) {
	row := q.db.QueryRowContext(ctx, createJoke,
		arg.Author,
		arg.Title,
		arg.Text,
		arg.Explanation,
	)
	var i Joke
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Title,
		&i.Text,
		&i.Explanation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllJokes = `-- name: DeleteAllJokes :exec
DELETE FROM jokes
`

func (q *Queries) DeleteAllJokes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllJokes)
	return err
}

const deleteJoke = `-- name: DeleteJoke :exec

DELETE FROM jokes
WHERE id = $1
`

// DELETE QUERIES
func (q *Queries) DeleteJoke(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteJoke, id)
	return err
}

const deleteJokesByAuthor = `-- name: DeleteJokesByAuthor :exec
DELETE FROM jokes
WHERE author = $1
`

func (q *Queries) DeleteJokesByAuthor(ctx context.Context, author string) error {
	_, err := q.db.ExecContext(ctx, deleteJokesByAuthor, author)
	return err
}

const getJoke = `-- name: GetJoke :one

SELECT id, author, title, text, explanation, created_at, updated_at FROM jokes
WHERE id = $1 LIMIT 1
`

// GET QUERIES
func (q *Queries) GetJoke(ctx context.Context, id int32) (Joke, error) {
	row := q.db.QueryRowContext(ctx, getJoke, id)
	var i Joke
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Title,
		&i.Text,
		&i.Explanation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listJokes = `-- name: ListJokes :many
SELECT id, author, title, text, explanation, created_at, updated_at FROM jokes
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListJokesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListJokes(ctx context.Context, arg ListJokesParams) ([]Joke, error) {
	rows, err := q.db.QueryContext(ctx, listJokes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Joke
	for rows.Next() {
		var i Joke
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Title,
			&i.Text,
			&i.Explanation,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJokesByAuthor = `-- name: ListJokesByAuthor :many
SELECT id, author, title, text, explanation, created_at, updated_at FROM jokes
WHERE author = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListJokesByAuthorParams struct {
	Author string `json:"author"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListJokesByAuthor(ctx context.Context, arg ListJokesByAuthorParams) ([]Joke, error) {
	rows, err := q.db.QueryContext(ctx, listJokesByAuthor, arg.Author, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Joke
	for rows.Next() {
		var i Joke
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Title,
			&i.Text,
			&i.Explanation,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJokeExplanation = `-- name: UpdateJokeExplanation :one
UPDATE jokes
SET explanation = $2
WHERE id = $1
RETURNING id, author, title, text, explanation, created_at, updated_at
`

type UpdateJokeExplanationParams struct {
	ID          int32  `json:"id"`
	Explanation string `json:"explanation"`
}

func (q *Queries) UpdateJokeExplanation(ctx context.Context, arg UpdateJokeExplanationParams) (Joke, error) {
	row := q.db.QueryRowContext(ctx, updateJokeExplanation, arg.ID, arg.Explanation)
	var i Joke
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Title,
		&i.Text,
		&i.Explanation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateJokeText = `-- name: UpdateJokeText :one
UPDATE jokes
SET text = $2
WHERE id = $1
RETURNING id, author, title, text, explanation, created_at, updated_at
`

type UpdateJokeTextParams struct {
	ID   int32  `json:"id"`
	Text string `json:"text"`
}

func (q *Queries) UpdateJokeText(ctx context.Context, arg UpdateJokeTextParams) (Joke, error) {
	row := q.db.QueryRowContext(ctx, updateJokeText, arg.ID, arg.Text)
	var i Joke
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Title,
		&i.Text,
		&i.Explanation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateJokeTitle = `-- name: UpdateJokeTitle :one

UPDATE jokes
SET title = $2
WHERE id = $1
RETURNING id, author, title, text, explanation, created_at, updated_at
`

type UpdateJokeTitleParams struct {
	ID    int32  `json:"id"`
	Title string `json:"title"`
}

// UPDATE QUERIES
func (q *Queries) UpdateJokeTitle(ctx context.Context, arg UpdateJokeTitleParams) (Joke, error) {
	row := q.db.QueryRowContext(ctx, updateJokeTitle, arg.ID, arg.Title)
	var i Joke
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Title,
		&i.Text,
		&i.Explanation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
